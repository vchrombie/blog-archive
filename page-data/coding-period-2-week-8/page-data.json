{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/coding-period-2-week-8","result":{"data":{"post":{"__typename":"MdxPost","slug":"/coding-period-2-week-8","title":"semana ocho","date":"26.07.2020","tags":[{"name":"GSoC","slug":"g-so-c"},{"name":"CHAOSS","slug":"chaoss"},{"name":"ELK","slug":"elk"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"semana ocho\",\n  \"date\": \"2020-07-26T00:00:00.000Z\",\n  \"tags\": [\"GSoC\", \"CHAOSS\", \"ELK\"],\n  \"slug\": \"coding-period-2-week-8\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h4\", null, \"Coding Period 2, Week 8: Adding tests \\uD83E\\uDDEA.\"), mdx(\"p\", null, \"I worked on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"meetupqm\"), \" enricher and completed implementing all the metrics.\"), mdx(\"p\", null, \"I started working on the tests for the existing enrichers. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/15\"\n  }), \"vchrombie/gsoc#15\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"gitlabqm\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"gitqm\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"pipermailqm\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"meetupqm\"))), mdx(\"p\", null, \"I had some pretty good experience working with tests as I have tried it on the gitlabcomments enricher during the Community Bonding Period. Though that PR is not completed, I plan to complete it soon, or even after the GSoC period. I took the implementation of tests and started working.\"), mdx(\"p\", null, \"Basically, you need to add the test data in the specific folder and create test scripts. The testing script has to create a mock server and enrich the test data. Now, we try to test the enriched values with the expected values using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assert\"), \" statements.\"), mdx(\"p\", null, \"I'm adding a code snippet from the gitlabcomments test.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"item = self.items[4]\\neitem = enrich_backend.get_rich_item(item)\\nself.assertEqual(item['category'], 'merge_request')\\nself.assertEqual(eitem['merge_state'], 'merged')\\nself.assertEqual(eitem['author_name'], 'Vaishnav')\\nself.assertIsNone(eitem['author_domain'])\\nself.assertIsNone(eitem['merge_author_domain'])\\n\")), mdx(\"p\", null, \"Also, I have opened an issue for discussions to add more quality models using the metrics extracted from different data sources during the project. If you are interested, please drop your suggestions on the issue thread. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/16\"\n  }), \"vchrombie/gsoc#16\")), mdx(\"p\", null, \"I worked on making a talk proposal about Prosoul so that I can apply for a few conferences. I made a presentation for the same purpose. Here is the link to the slides, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.google.com/presentation/d/1Yfkgx7DYG9bJINZ6gdvlYH878s9AIbxgxPZak6pVr_g/edit?usp=sharing\"\n  }), \"Talk about Prosoul and QM Slides\"), \".\"), mdx(\"p\", null, \"I started working on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gitlab.com/gitlab-org/\"\n  }), \"GitLab.org\"), \" pilot study. \\uD83D\\uDEE9\\uFE0F\"), mdx(\"p\", null, \"I'm planning to complete the tests and the pilot study this week.\"), mdx(\"p\", null, \"If you have any comments or questions, please make sure to comment down below. :)\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Coding Period 2, Week 8: Adding tests ðŸ§ª. I worked on the  meetupqm  enricher and completed implementing all the metrics. I started workingâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/coding-period-2-week-8","formatString":"DD.MM.YYYY"}}}