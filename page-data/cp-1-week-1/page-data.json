{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/cp-1-week-1","result":{"data":{"post":{"__typename":"MdxPost","slug":"/cp-1-week-1","title":"semana uno","date":"08.06.2020","tags":[{"name":"GSoC","slug":"g-so-c"},{"name":"CHAOSS","slug":"chaoss"},{"name":"ELK","slug":"elk"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"semana uno\",\n  \"date\": \"2020-06-08T00:00:00.000Z\",\n  \"tags\": [\"GSoC\", \"CHAOSS\", \"ELK\"],\n  \"slug\": \"cp-1-week-1\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h4\", null, \"Coding Period 1, Week 1: Baby steps \\uD83D\\uDC25.\"), mdx(\"p\", null, \"Hola!\"), mdx(\"p\", null, \"We entered the official coding period \\uD83E\\uDD73 and I'm here with the report of the work done in the first week of the coding period. We had a meeting, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/blob/master/meetings/2020-06-04-coding-period-1-week-1.txt\"\n  }), \"2020-06-04-coding-period-1-week-1.txt\"), \", a few days back and we discussed the completed work till now and planned some work for the upcoming week. I'm expecting to show a small working demo of the project this Friday (hopefully \\uD83E\\uDD1E).\"), mdx(\"p\", null, \"During the last week's meeting of the community bonding, I planned to start working on the QM enrichers and I picked gitlab as my first option because I was already working on \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gitlabcomments\"), \" enricher. I opened an issue to track its progress. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/6\"\n  }), \"vchrombie/gsoc#6\")), mdx(\"p\", null, \"I implemented the basic structure of the QM enrichers. I planned to have a parent class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QMEnrich\"), \" which is inherited by the child class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QMGitLabEnrich\"), \". I would be following the same approach as the qm enrichers might share a few things (mapping) in common.\"), mdx(\"p\", null, \"parent\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"class QMMapping(BaseMapping):\\n\\n    def get_elastic_mappings(es_major):\\n\\n\\nclass QMEnrich(Enrich):\\n    mapping = QMMapping\\n\")), mdx(\"p\", null, \"child (enricher)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"class QMGitLabEnrich(QMEnrich):\\n\\n    def __init__()\\n\\n    def enrich_items(self, ocean_backend):\\n\\n\")), mdx(\"p\", null, \"Working Branch \\uD83D\\uDC49 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/grimoirelab-elk/tree/gitlabqm\"\n  }), \"https://github.com/vchrombie/grimoirelab-elk/tree/gitlabqm\")), mdx(\"p\", null, \"The main step of building an enricher is to get a minimal idea \\uD83D\\uDCAD of the data format of the enriched item. I checked the existing index format which I used during the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/chaoss-microtasks/tree/master/microtask-9\"\n  }), \"microtask-9\"), \". I was able to figure out a decent format of the index which can be consumed by Prosoul. Ideally, the enricher should perform queries to get the data for every day.\"), mdx(\"p\", null, \"For example: If we want to measure the number of issues opened, the enriched data should be a document per day giving the value of the number of issues opened that day. (something like)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"{\\n  \\\"Date\\\" : \\\"20181229\\\",\\n  \\\"numberOfIssuesOpened\\\" : 8\\n},\\n{\\n  \\\"Date\\\" : \\\"20181230\\\",\\n  \\\"numberOfIssuesOpened\\\" : 5\\n},\\n\")), mdx(\"p\", null, \"I need to change the format a bit (as we don't need a few items \\uD83D\\uDE45\\u200D\\u2642\\uFE0F). \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/7\"\n  }), \"vchrombie/gsoc#7\")), mdx(\"p\", null, \"I was contemplating about the metrics that can be extracted from the gitlab data. Valerio suggested a few metrics.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of issues per day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of comments per day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of merges per day\")), mdx(\"p\", null, \"I was thinking over it and felt we can divide these metrics into some more detail. \\uD83E\\uDD14\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of issues per day\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of issued opened per day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of issues closed per day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number of issues attended per day\")))), mdx(\"p\", null, \"I got this idea from this quality model, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Bitergia/prosoul/blob/master/django-prosoul/prosoul/data/developer_model.json\"\n  }), \"developer_model.json\"), \". We need to dig more into these metrics and find all that metrics which we can extract from the gitlab data (versions, labels, milestones). I will check the existing qms for more inspiration. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/8\"\n  }), \"vchrombie/gsoc#8\")), mdx(\"p\", null, \"Other than planned in the timeline, I also worked on the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gitlabcomments\"), \" enricher (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chaoss/grimoirelab-elk/pull/881\"\n  }), \"chaoss/grimoirelab-elk#881\"), \") and achieved a considerable target \\uD83E\\uDD18. I completed working on the enricher and Valerio pointed out some mistakes which I corrected and got the enricher working. \"), mdx(\"p\", null, \"Valerio also found out the peculiar mapping of this enricher. The implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__get-reactions()\"), \" (which stores the reaction data of issues/mrs/comments) creates a mapping with each reaction separately, resulting in a lot of unnecessary mapping being created.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"  \\\"project\\\": {\\n    \\\"type\\\": \\\"keyword\\\"\\n  },\\n  \\\"reaction_100\\\" : {\\n    \\\"type\\\" : \\\"long\\\"\\n  },\\n  \\\"reaction_basketball_player\\\" : {\\n    \\\"type\\\" : \\\"long\\\"\\n  },\\n  \\\"reaction_bow\\\" : {\\n    \\\"type\\\" : \\\"long\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"keyword\\\"\\n  },\\n  \\\"sub_type\\\": {\\n    \\\"type\\\": \\\"keyword\\\"\\n  },\\n\")), mdx(\"p\", null, \"We discussed it and Valerio suggested a new mapping. We had to change the logic according to the new mapping.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"  \\\"project\\\": {\\n    \\\"type\\\": \\\"keyword\\\"\\n  },\\n  \\\"reactions\\\": {\\n    \\\"properties\\\": {\\n      \\\"count\\\": {\\n        \\\"type\\\": \\\"long\\\"\\n      },\\n      \\\"type\\\": {\\n        \\\"type\\\": \\\"keyword\\\"\\n      }\\n    }\\n  },\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"keyword\\\"\\n  },\\n\")), mdx(\"p\", null, \"This mapping and implementation stores the data as\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-noLineNumbers\"\n  }), \"  \\\"reactions\\\": [\\n    {\\n      \\\"type\\\": \\\"rocket\\\",\\n      \\\"count\\\": 1\\n    },\\n    {\\n      \\\"type\\\": \\\"smiley\\\",\\n      \\\"count\\\": 2\\n    },\\n    {\\n      \\\"type\\\": \\\"thumbsup\\\",\\n      \\\"count\\\": 4\\n    }\\n  ],\\n\")), mdx(\"p\", null, \"Now the mapping makes more sense. The enricher and configurations are completed, schema and tests are pending. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vchrombie/gsoc/issues/4\"\n  }), \"vchrombie/gsoc#4\")), mdx(\"p\", null, \"If you have any comments or questions, please make sure to comment down below. :)\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Coding Period 1, Week 1: Baby steps 🐥. Hola! We entered the official coding period 🥳 and I'm here with the report of the work done in the…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/cp-1-week-1","formatString":"DD.MM.YYYY"}}}